package test.vc.particles.util;

import android.util.Log;

import static android.opengl.GLES20.GL_COMPILE_STATUS;
import static android.opengl.GLES20.GL_FRAGMENT_SHADER;
import static android.opengl.GLES20.GL_LINK_STATUS;
import static android.opengl.GLES20.GL_VALIDATE_STATUS;
import static android.opengl.GLES20.GL_VERTEX_SHADER;
import static android.opengl.GLES20.glAttachShader;
import static android.opengl.GLES20.glCompileShader;
import static android.opengl.GLES20.glCreateProgram;
import static android.opengl.GLES20.glCreateShader;
import static android.opengl.GLES20.glDeleteShader;
import static android.opengl.GLES20.glGetProgramInfoLog;
import static android.opengl.GLES20.glGetProgramiv;
import static android.opengl.GLES20.glGetShaderInfoLog;
import static android.opengl.GLES20.glGetShaderiv;
import static android.opengl.GLES20.glLinkProgram;
import static android.opengl.GLES20.glShaderSource;
import static android.opengl.GLES20.glValidateProgram;

/**
 * Created by HaoZhe Chen on 2015/4/6.
 * ShaderHelper is used to help with compiling shader code into a shader object.
 */
public class ShaderHelper {
    private static final String TAG = "ShaderHelper";

    /**
     * Compile the shaderCode for vertex.
     * @param shaderCode
     * A string of shaderCode for vertex;
     * @return
     * An integer representing a shader object which comes from the code;
     */
    public static int compileVertexShader(String shaderCode) {
        return compileShader(GL_VERTEX_SHADER, shaderCode);
    }

    /**
     * Compile the shaderCode for fragment.
     * @param shaderCode
     * A string of shaderCode for fragment;
     * @return
     * An integer representing a shader object which comes from the code;
     */
    public static int compileFragmentShader(String shaderCode) {
        return compileShader(GL_FRAGMENT_SHADER, shaderCode);
    }

    /**
     * Do the compile work. Generate a shader object which comes from the shader code.
     * @param type
     * The type of shaderCode
     * @param shaderCode
     * A string of shaderCode read by reader need to be compile.
     * @return
     * An integer representing a shader object which comes from shader code.
     */
    public static int compileShader(int type, String shaderCode) {
        // Create and shader object.
        final int shaderObjectId = glCreateShader(type);
        if (shaderObjectId == 0) {
            if (LoggerConfig.ON) {
                Log.w(TAG, "Could not create new shader");
            }
            return 0;
        }

        // Compile the shader code.
        glShaderSource(shaderObjectId, shaderCode);
        glCompileShader(shaderObjectId);

        // Check the shader compile log file.
        final int[]  compileStatus = new int[1];
        glGetShaderiv(shaderObjectId, GL_COMPILE_STATUS, compileStatus, 0);
        if (LoggerConfig.ON) {
            Log.v(TAG, "Results of compiling source: " + "\n" + shaderCode + "\n" + glGetShaderInfoLog((shaderObjectId)));
        }

        // Free the object if compilation fail.
        if (compileStatus[0]  == 0) {
            glDeleteShader(shaderObjectId);
            if (LoggerConfig.ON) {
                Log.w(TAG, "Compilation of shader failed.");
            }
            return 0;
        }

        return shaderObjectId;
    }

    /**
     * Link the vertex shader with fragment shader.
     * @param vertexShaderId
     * An integer representing a vertex shader object.
     * @param fragmentShaderId
     * An integer representing a fragment shader object.
     * @return
     * An integer representing a program object generated by linking the vertex and fragment shader object.
     */
    public static int linkProgram(int vertexShaderId, int fragmentShaderId) {
        // Create a program object.
        final int programObjectId = glCreateProgram();
        if (programObjectId == 0) {
            if (LoggerConfig.ON) {
                Log.w(TAG, "Could not create new program");
            }
            return 0;
        }

        // Attach the new program object with shader object.
        glAttachShader(programObjectId, vertexShaderId);
        glAttachShader(programObjectId, fragmentShaderId);

        // Link the program.
        glLinkProgram(programObjectId);
        final int[] linkStatus = new int[1];
        glGetProgramiv(programObjectId, GL_LINK_STATUS, linkStatus, 0);
        if (LoggerConfig.ON) {
            Log.v(TAG, "Results of linking program: \n" + glGetProgramInfoLog(programObjectId));
        }

        //Check the linking status and return the program object.
        if (linkStatus[0] == 0) {
            // If linking failed, delete the program object.
            glDeleteShader(programObjectId);
            if (LoggerConfig.ON) {
                Log.w(TAG, "Linking of program failed");
            }
            return 0;
        }

        return programObjectId;
    }

    /**
     * Check whether the GL program is valid
     * @param programObjectId
     * An integer representing the GL program needs to be validated.
     * @return
     * Whether the program is valid.
     */
    public static boolean validateProgram(int programObjectId) {
        glValidateProgram(programObjectId);

        final int[] validateStatus = new int[1];
        glGetProgramiv(programObjectId, GL_VALIDATE_STATUS, validateStatus, 0);
        Log.v(TAG, "Results of validating program: " + validateStatus[0] + "\nLog" + glGetProgramInfoLog(programObjectId));

        return validateStatus[0] != 0;
    }

    public static int buildProgram(String vertexShaderSource, String fragmentShaderSource) {
        int program;

        int vertexShader = compileVertexShader(vertexShaderSource);
        int fragmentShader = compileFragmentShader(fragmentShaderSource);

        program = linkProgram(vertexShader, fragmentShader);

        if (LoggerConfig.ON) {
            validateProgram(program);
        }
        return program;
    }
}
